plugins {
	id 'java'
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'com.avast.gradle.docker-compose'
}

group = 'me.jangjunha.ftgo'
version = '0.0.1-SNAPSHOT'

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
			srcDir 'src/integration-test/java'
		}
	}
}

configurations {
	integrationTestImplementation.extendsFrom implementation
	integtationTestApi.extendsFrom api
	integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-json:$springBootVersion"

	implementation "io.eventuate.tram.core:eventuate-tram-spring-events"
	implementation "io.eventuate.tram.core:eventuate-tram-spring-events-publisher"
	implementation "io.eventuate.tram.core:eventuate-tram-spring-producer-jdbc"
	implementation "io.eventuate.tram.core:eventuate-tram-spring-consumer-kafka"
	implementation "io.eventuate.tram.core:eventuate-tram-aggregate-domain-events"
	implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-orchestration-simple-dsl"
	implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-participant"

	implementation "io.grpc:grpc-netty:$grpcVersion"
	implementation "io.grpc:grpc-stub:$grpcVersion"

	implementation(project(':ftgo-common')) {
		capabilities {
			requireCapability('me.jangjunha.ftgo:ftgo-common-proto')
		}
	}
	implementation project(':ftgo-common-jpa')
	implementation project(':ftgo-kitchen-service-api')
	implementation project(':ftgo-restaurant-service-api')

	implementation "com.querydsl:querydsl-jpa:$queryDslVersion:jakarta"
	implementation "com.querydsl:querydsl-apt:$queryDslVersion:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:$queryDslVersion:jakarta"
	annotationProcessor "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"

	testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
	testImplementation "org.mockito:mockito-inline"
	testImplementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-testing-support"
	testImplementation "io.eventuate.tram.core:eventuate-tram-spring-in-memory"
	testImplementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-in-memory"
	testImplementation 'au.com.dius.pact.provider:junit5spring:4.6.2'
	testImplementation 'au.com.dius.pact.consumer:junit5:4.6.2'
	testImplementation(project(':ftgo-pact')) {
		capabilities {
			requireCapability("me.jangjunha.ftgo:ftgo-pact-provider")
		}
	}
	testRuntimeOnly 'com.h2database:h2'

	integrationTestImplementation 'io.eventuate.tram.core:eventuate-tram-spring-in-memory'
	integrationTestImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

	developmentOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"
	runtimeOnly 'org.postgresql:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register("integrationTests", Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath

	useJUnitPlatform()
	shouldRunAfter test

	doFirst {
		def dbInfo = dockerCompose.integrationTests.servicesInfos['kitchen-service-db']
		environment "SPRING_DATASOURCE_URL", "jdbc:postgresql://${dbInfo.host}:${dbInfo.ports[5432]}/ftgo-kitchen-service"
		environment "SPRING_DATASOURCE_USERNAME", "postgres"
	}
}

dockerCompose {
	integrationTests {
		projectName = "ftgo-kitchen-service-integration-test"
		startedServices = ['kitchen-service-db']
		downAdditionalArgs = ['-v']
		isRequiredBy(tasks.integrationTests)
	}
}
