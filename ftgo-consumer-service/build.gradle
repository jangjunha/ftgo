plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
    id 'org.jetbrains.kotlin.plugin.jpa'
}

group = 'me.jangjunha.ftgo'
version = '0.0.1-SNAPSHOT'

dependencies {
    implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-participant"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-producer-jdbc"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-events-publisher"
    implementation "io.eventuate.tram.core:eventuate-tram-aggregate-domain-events"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-consumer-kafka"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-consumer-jdbc"

    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation project(':ftgo-common-jpa')
    implementation project(':ftgo-consumer-service-api')

    testImplementation ("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
        exclude module: "mockito-core"
    }
    testImplementation "com.ninja-squad:springmockk:4.0.0"
    testImplementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-testing-support"

    developmentOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"

    runtimeOnly 'org.postgresql:postgresql'
}

tasks.named('test') {
    useJUnitPlatform()

    systemProperty("pact.provider.version", System.getenv("GIT_COMMIT") ?: "")
    systemProperty("pact.provider.tag", System.getenv("GIT_BRANCH") ?: "")
    systemProperty("pact.provider.branch", System.getenv("GIT_BRANCH") ?: "")
    systemProperty("pactbroker.consumerversionselectors.rawjson", "[{\"mainBranch\":true}]")
    systemProperty("pact.verifier.publishResults", System.getenv("PACT_BROKER_PUBLISH_VERIFICATION_RESULTS") == null ? "false" : "true")
}

allOpen {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.Embeddable")
}

noArg {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.Embeddable")
}
