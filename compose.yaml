services:
  ### Messaging ###
  zookeeper:
    image: eventuateio/eventuate-zookeeper:0.17.0.RELEASE
    volumes:
      - zookeeper-data:/usr/local/zookeeper-data
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      KAFKA_HEAP_OPTS: -Xmx64m

  kafka:
    image: eventuateio/eventuate-kafka:0.17.0.RELEASE
    volumes:
      - kafka-data:/tmp/kafka-logs
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENERS: LC://kafka:29092,LX://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LC://kafka:29092,LX://${DOCKER_HOST_IP:-localhost}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LC:PLAINTEXT,LX:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LC
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: -Xmx192m

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - 8989:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:22181

  cdc-service:
    image: eventuateio/eventuate-cdc-service:0.15.0.RELEASE
    ports:
      - 8099:8080
    depends_on:
      - kafka
      - restaurant-service-db
      - kitchen-service-db
      - order-service-db
    environment:
      SPRING_PROFILE_ACTIVE: PostgresWal

      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181

      EVENTUATE_CDC_PIPELINE_RESTAURANT_TYPE: eventuate-tram
      EVENTUATE_CDC_PIPELINE_RESTAURANT_READER: restaurantservice
      EVENTUATE_CDC_READER_RESTAURANTSERVICE_TYPE: postgres-wal
      EVENTUATE_CDC_READER_RESTAURANTSERVICE_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_RESTAURANTSERVICE_DATASOURCEURL: jdbc:postgresql://restaurant-service-db/ftgo-restaurant-service
      EVENTUATE_CDC_READER_RESTAURANTSERVICE_DATASOURCEUSERNAME: postgres
      EVENTUATE_CDC_READER_RESTAURANTSERVICE_DATASOURCEPASSWORD: ''
      EVENTUATE_CDC_READER_RESTAURANTSERVICE_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/reader-restaurant-db
      EVENTUATE_CDC_READER_RESTAURANTSERVICE_OUTBOXID: 8101

      EVENTUATE_CDC_PIPELINE_CONSUMER_TYPE: eventuate-tram
      EVENTUATE_CDC_PIPELINE_CONSUMER_READER: consumerservice
      EVENTUATE_CDC_READER_CONSUMERSERVICE_TYPE: postgres-wal
      EVENTUATE_CDC_READER_CONSUMERSERVICE_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_CONSUMERSERVICE_DATASOURCEURL: jdbc:postgresql://consumer-service-db/ftgo-consumer-service
      EVENTUATE_CDC_READER_CONSUMERSERVICE_DATASOURCEUSERNAME: postgres
      EVENTUATE_CDC_READER_CONSUMERSERVICE_DATASOURCEPASSWORD: ''
      EVENTUATE_CDC_READER_CONSUMERSERVICE_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/reader-consumer-db
      EVENTUATE_CDC_READER_CONSUMERSERVICE_OUTBOXID: 8102

      EVENTUATE_CDC_PIPELINE_ORDER_TYPE: eventuate-tram
      EVENTUATE_CDC_PIPELINE_ORDER_READER: orderservice
      EVENTUATE_CDC_READER_ORDERSERVICE_TYPE: postgres-wal
      EVENTUATE_CDC_READER_ORDERSERVICE_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_ORDERSERVICE_DATASOURCEURL: jdbc:postgresql://order-service-db/ftgo-order-service
      EVENTUATE_CDC_READER_ORDERSERVICE_DATASOURCEUSERNAME: postgres
      EVENTUATE_CDC_READER_ORDERSERVICE_DATASOURCEPASSWORD: ''
      EVENTUATE_CDC_READER_ORDERSERVICE_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/reader-order-db
      EVENTUATE_CDC_READER_ORDERSERVICE_OUTBOXID: 8103

      EVENTUATE_CDC_PIPELINE_KITCHEN_TYPE: eventuate-tram
      EVENTUATE_CDC_PIPELINE_KITCHEN_READER: kitchenservice
      EVENTUATE_CDC_READER_KITCHENSERVICE_TYPE: postgres-wal
      EVENTUATE_CDC_READER_KITCHENSERVICE_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_KITCHENSERVICE_DATASOURCEURL: jdbc:postgresql://kitchen-service-db/ftgo-kitchen-service
      EVENTUATE_CDC_READER_KITCHENSERVICE_DATASOURCEUSERNAME: postgres
      EVENTUATE_CDC_READER_KITCHENSERVICE_DATASOURCEPASSWORD: ''
      EVENTUATE_CDC_READER_KITCHENSERVICE_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/reader-kitchen-db
      EVENTUATE_CDC_READER_KITCHENSERVICE_OUTBOXID: 8105


  ### Databases ###
  restaurant-service-db:
    restart: always
    build:
      context: ./database
      target: base
    volumes:
      - restaurant-service-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=ftgo-restaurant-service
      - USE_DB_ID=true

  consumer-service-db:
    restart: always
    build:
      context: ./database
      target: base
    volumes:
      - consumer-service-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=ftgo-consumer-service
      - USE_DB_ID=true

  kitchen-service-db:
    restart: always
    build:
      context: ./database
      target: saga
    volumes:
      - kitchen-service-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=ftgo-kitchen-service
      - USE_DB_ID=true

  order-service-db:
    restart: always
    build:
      context: ./database
      target: saga
    volumes:
      - order-service-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=ftgo-order-service
      - USE_DB_ID=true

  accounting-service-db:
    image: eventstore/eventstore:22.10.1-alpha-arm64v8
#    image: eventstore/eventstore:22.10.1-buster-slim
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "1113:1113"
      - "2113:2113"
    volumes:
      - type: volume
        source: accounting-service-db-data
        target: /var/lib/eventstore
      - type: volume
        source: accounting-service-db-logs
        target: /var/log/eventstore

  accounting-service-projection-db:
    restart: always
    image: postgres:15-alpine
    volumes:
      - accounting-service-projection-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=ftgo-accounting-service

  order-history-service-db:
    restart: always
    image: amazon/dynamodb-local
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data"
    user: root
    ports:
      - "8086:8000"
    volumes:
      - order-history-service-db-data:/home/dynamodblocal/data
    environment:
      JAVA_OPTS: -Xmx128m


  ### Applications ###
  restaurant-service-app:
    build:
      context: .
      target: restaurant-service
    ports:
      - 8101:8101
    depends_on:
      - restaurant-service-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://restaurant-service-db/ftgo-restaurant-service
      SPRING_DATASOURCE_USERNAME: postgres

  consumer-service-app:
    build:
      context: .
      target: consumer-service
    ports:
      - 8102:8102
    depends_on:
      - consumer-service-db
      - kafka
      - zookeeper
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://consumer-service-db/ftgo-consumer-service
      SPRING_DATASOURCE_USERNAME: postgres
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181

  kitchen-service-app:
    build:
      context: .
      target: kitchen-service
    ports:
      - 8105:8105
    depends_on:
      - kitchen-service-db
      - kafka
      - zookeeper
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://kitchen-service-db/ftgo-kitchen-service
      SPRING_DATASOURCE_USERNAME: postgres
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181

  order-service-app:
    build:
      context: .
      target: order-service
    ports:
      - 8103:8103
      - 8107:8107
    depends_on:
      - order-service-db
      - kafka
      - zookeeper
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-service-db/ftgo-order-service
      SPRING_DATASOURCE_USERNAME: postgres
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181

  accounting-service-app:
    build:
      context: .
      target: accounting-service
    ports:
      - 8104:8104
    depends_on:
      - accounting-service-db
      - accounting-service-projection-db
      - kafka
      - zookeeper
    environment:
      DATABASE_URI: esdb://accounting-service-db:2113?tls=false
      SPRING_DATASOURCE_URL: jdbc:postgresql://accounting-service-projection-db/ftgo-accounting-service
      SPRING_DATASOURCE_USERNAME: postgres
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  order-history-service-app:
    build:
      context: .
      target: order-history-service
    ports:
      - 8106:8106
    depends_on:
      - order-history-service-db
      - kafka
      - zookeeper
    environment:
      AWS_DYNAMODB_ENDPOINT_URL: http://order-history-service-db:8000
      AWS_REGION: ${AWS_REGION:-ap-northeast-2}
      AWS_ACCESS_KEY_ID: "dummy"
      AWS_SECRET_ACCESS_KEY: "dummy"
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  order-history-service-db-init:
    build:
      context: .
      target: order-history-service
    entrypoint:
      - "java"
      - "-cp"
      - ".:./lib/*"
      - "-Dspring.profiles.active=cli"
      - "me.jangjunha.ftgo.order_history_service.OrderHistoryServiceMainKt"
      - "db"
      - "create"
    depends_on:
      - order-history-service-db
      - kafka
      - zookeeper
    environment:
      AWS_DYNAMODB_ENDPOINT_URL: http://order-history-service-db:8000
      AWS_REGION: ${AWS_REGION:-ap-northeast-2}
      AWS_ACCESS_KEY_ID: "dummy"
      AWS_SECRET_ACCESS_KEY: "dummy"
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  ### Etc ###
  api-gateway:
    build:
      context: .
      target: api-gateway
    ports:
      - 8199:8199
    environment:
      DESTINATIONS_RESTAURANT_SERVICE_URL: http://restaurant-service-app:8101/

volumes:
  zookeeper-data: {}
  kafka-data: {}
  restaurant-service-db-data: {}
  consumer-service-db-data: {}
  kitchen-service-db-data: {}
  order-service-db-data: {}
  accounting-service-db-data: {}
  accounting-service-db-logs: {}
  accounting-service-projection-db-data: {}
  order-history-service-db-data: {}
