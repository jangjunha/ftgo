plugins {
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'org.jetbrains.kotlin.jvm'
	id 'org.jetbrains.kotlin.plugin.spring'
	id 'org.jetbrains.kotlin.plugin.jpa'
	id 'com.avast.gradle.docker-compose'
}

group = 'me.jangjunha.ftgo'
version = '0.0.1-SNAPSHOT'

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}

	componentTest {
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom implementation
	integtationTestApi.extendsFrom api
	integrationTestRuntimeOnly.extendsFrom runtimeOnly

	componentTestImplementation.extendsFrom implementation
	componentTestApi.extendsFrom api
	componentTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.5.0'

	implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-orchestration-simple-dsl"
	implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-orchestration"
	implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-participant"
	implementation "io.eventuate.tram.core:eventuate-tram-aggregate-domain-events"
	implementation "io.eventuate.tram.core:eventuate-tram-spring-consumer-kafka"
	implementation "io.eventuate.tram.core:eventuate-tram-spring-producer-jdbc"
	implementation "io.eventuate.tram.core:eventuate-tram-spring-events-publisher"

	implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation "io.grpc:grpc-netty:$grpcVersion"
	implementation "io.grpc:grpc-kotlin-stub:$grpcKotlinVersion"
	implementation "com.google.protobuf:protobuf-kotlin:$protobufVersion"

	implementation project(':ftgo-common-jpa')
	implementation project(':ftgo-accounting-service-api')
	implementation project(':ftgo-consumer-service-api')
	implementation project(':ftgo-kitchen-service-api')
	implementation project(':ftgo-restaurant-service-api')
	implementation project(':ftgo-order-service-api')

	testImplementation ("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
		exclude module: "mockito-core"
	}
	testImplementation "com.ninja-squad:springmockk:4.0.0"
	testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1'
	testImplementation 'org.jetbrains.kotlin:kotlin-test'
	testImplementation "io.eventuate.tram.core:eventuate-tram-test-util"
	testImplementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-testing-support"
	testImplementation 'au.com.dius.pact.consumer:junit5:4.6.2'
	testImplementation 'au.com.dius.pact.provider:junit5spring:4.6.2'
	testImplementation(project(':ftgo-pact')) {
		capabilities {
			requireCapability("me.jangjunha.ftgo:ftgo-pact-provider")
		}
	}
	testImplementation(project(':eventuate-tram-test-util'))
	testImplementation 'io.eventuate.tram.core:eventuate-tram-spring-in-memory'
	testImplementation 'io.eventuate.tram.sagas:eventuate-tram-sagas-spring-in-memory'
	testRuntimeOnly 'com.h2database:h2'

	integrationTestImplementation 'io.eventuate.tram.core:eventuate-tram-spring-in-memory'
	integrationTestImplementation ("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
		exclude module: "mockito-core"
	}

	componentTestImplementation platform('org.junit:junit-bom:5.9.2')
	componentTestImplementation 'org.junit.jupiter:junit-jupiter'
	componentTestImplementation 'org.junit.platform:junit-platform-suite'
	componentTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	componentTestImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
	componentTestImplementation 'io.cucumber:cucumber-java:7.14.0'
	componentTestImplementation 'io.cucumber:cucumber-spring:7.14.0'
	componentTestImplementation 'io.cucumber:cucumber-junit-platform-engine:7.14.0'
	componentTestImplementation 'io.eventuate.tram.sagas:eventuate-tram-sagas-testing-support'
	componentTestImplementation 'io.eventuate.tram.sagas:eventuate-tram-sagas-spring-testing-support'
	componentTestImplementation 'io.eventuate.util:eventuate-util-test'
	componentTestImplementation 'org.jetbrains.kotlin:kotlin-test'

	developmentOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"

	runtimeOnly 'org.postgresql:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
	
	systemProperty("pact.provider.version", System.getenv("GIT_COMMIT") ?: "")
	systemProperty("pact.provider.tag", System.getenv("GIT_BRANCH") ?: "")
	systemProperty("pact.provider.branch", System.getenv("GIT_BRANCH") ?: "")
	systemProperty("pactbroker.consumerversionselectors.rawjson", "[{\"mainBranch\":true}]")
	systemProperty("pact.verifier.publishResults", System.getenv("PACT_BROKER_PUBLISH_VERIFICATION_RESULTS") == null ? "false" : "true")
}

tasks.register("integrationTests", Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath

	useJUnitPlatform()
	shouldRunAfter test

	doFirst {
		def dbInfo = dockerCompose.integrationTests.servicesInfos['order-service-db']
		environment "SPRING_DATASOURCE_URL", "jdbc:postgresql://${dbInfo.host}:${dbInfo.ports[5432]}/ftgo-order-service"
		environment "SPRING_DATASOURCE_USERNAME", "postgres"
	}
}

tasks.register('componentTest', Test) {
	testClassesDirs = sourceSets.componentTest.output.classesDirs
	classpath = sourceSets.componentTest.runtimeClasspath
	shouldRunAfter test

	useJUnitPlatform()

	doFirst {
		def dbInfo = dockerCompose.componentTest.servicesInfos['order-service-db']
		def kafkaInfo = dockerCompose.componentTest.servicesInfos['kafka']
		def zookeeperInfo = dockerCompose.componentTest.servicesInfos['zookeeper']
		environment "SPRING_DATASOURCE_URL", "jdbc:postgresql://${dbInfo.host}:${dbInfo.ports[5432]}/ftgo-order-service"
		environment "SPRING_DATASOURCE_USERNAME", "postgres"
		environment "SPRING_DATASOURCE_DRIVER_CLASS_NAME", "org.postgresql.Driver"
		environment "EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS", "${kafkaInfo.host}:${kafkaInfo.ports[9092]}"
		environment "EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING", "${zookeeperInfo.host}:${zookeeperInfo.ports[2181]}"
	}

	testLogging {
		events "passed"
	}
}

allOpen {
	annotation("jakarta.persistence.Entity")
	annotation("jakarta.persistence.Embeddable")
}

noArg {
	annotation("jakarta.persistence.Entity")
	annotation("jakarta.persistence.Embeddable")
}

dockerCompose {
	integrationTests {
		projectName = "ftgo-order-service-integration-test"
		startedServices = ['order-service-db']
		downAdditionalArgs = ['-v']
		isRequiredBy(tasks.integrationTests)
	}

	componentTest {
		projectName = "ftgo-order-service-component-test"
		startedServices = ['order-service-db', 'order-service-cdc', 'kafka', 'zookeeper', 'kafka-ui']
		downAdditionalArgs = ['-v']
		isRequiredBy(tasks.componentTest)
	}
}
