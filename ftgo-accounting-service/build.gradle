plugins {
	id 'io.spring.dependency-management'
	id 'org.springframework.boot'
	id 'org.jetbrains.kotlin.jvm'
	id 'org.jetbrains.kotlin.plugin.spring'
	id 'org.jetbrains.kotlin.plugin.jpa'
}

group = 'me.jangjunha.ftgo'
version = '0.0.1-SNAPSHOT'

dependencies {
	implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

	implementation "io.eventuate.tram.core:eventuate-tram-spring-messaging-producer-common"
	implementation "io.eventuate.tram.core:eventuate-tram-spring-consumer-kafka"
	implementation "io.eventuate.tram.core:eventuate-tram-spring-events"
	implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-participant"
	implementation "io.eventuate.messaging.kafka:eventuate-messaging-kafka-spring-common"
	implementation project(':eventuate-tram-producer-kafka')

	implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
	implementation 'org.springframework.retry:spring-retry:2.0.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	implementation 'com.eventstore:db-client-java:4.2.0'

	implementation project(':ftgo-common-jpa')
	implementation project(':ftgo-accounting-service-api')
	implementation project(':ftgo-consumer-service-api')

	developmentOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"

	runtimeOnly 'org.postgresql:postgresql'

	testImplementation ("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
		exclude module: "mockito-core"
	}
	testImplementation "com.ninja-squad:springmockk:4.0.0"
	testImplementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-in-memory"
	testImplementation 'au.com.dius.pact.provider:junit5spring:4.6.2'
	testImplementation(project(':ftgo-pact')) {
		capabilities {
			requireCapability("me.jangjunha.ftgo:ftgo-pact-provider")
		}
	}
	testRuntimeOnly 'com.h2database:h2'
}

allOpen {
	annotation("jakarta.persistence.Entity")
	annotation("jakarta.persistence.Embeddable")
}

noArg {
	annotation("jakarta.persistence.Entity")
	annotation("jakarta.persistence.Embeddable")
}

tasks.named('test') {
	useJUnitPlatform()

	systemProperty("pact.provider.version", System.getenv("GIT_COMMIT") ?: "")
	systemProperty("pact.provider.tag", System.getenv("GIT_BRANCH") ?: "")
	systemProperty("pact.provider.branch", System.getenv("GIT_BRANCH") ?: "")
	systemProperty("pactbroker.consumerversionselectors.rawjson", "[{\"mainBranch\":true}]")
	systemProperty("pact.verifier.publishResults", System.getenv("PACT_BROKER_PUBLISH_VERIFICATION_RESULTS") == null ? "false" : "true")
}
